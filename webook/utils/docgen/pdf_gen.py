import io
from typing import Dict, List
from reportlab import pdfgen
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter
from reportlab.lib import colors
from reportlab.lib.units import inch
from reportlab.platypus import Table
from reportlab.platypus import TableStyle, SimpleDocTemplate, Paragraph, Spacer
from reportlab.lib.styles import ParagraphStyle
from reportlab.lib.pagesizes import A4, A3
from uuid import uuid4
from django.conf import settings
from datetime import datetime

PATH_TO_PDF_FILES = settings.PDF_TMP_DIR

cm = 2.54


class Report:
    doc: SimpleDocTemplate

    buffer = io.BytesIO()
    alignment: int = 0

    response_or_file_name: str
    document_title: str = f"{settings.APP_TITLE} - Report"
    subtitle: str = (
        f"Generated by {settings.APP_TITLE}, at "
        + str(uuid4())[:8]
        + f" on {datetime.now().isoformat()} by UserName."
    )

    insert_app_logo: bool = True
    insert_header: bool = True

    elements: List = []

    fields: List[str] = []

    def __init__(
        self,
        response_or_file_name: str,
        document_title: str,
        page_size: tuple = A3,
        alignment: int = 0,
    ):
        self.buffer = io.BytesIO()
        self.document_title = document_title

        self.alignment = alignment

        self.doc = SimpleDocTemplate(
            self.buffer,
            rightMargin=0,
            leftMargin=0,
            topMargin=0.3 * cm,
            bottomMargin=0,
            showBoundary=1,
            pagesize=page_size,
        )

        if self.insert_header:
            self._register_header()

    def _register_header(self):
        header_paragraph = Paragraph(
            self.document_title,
            style=ParagraphStyle(name="Normal", fontSize=12, alignment=self.alignment),
        )
        header_stamp = Paragraph(
            self.subtitle,
            style=ParagraphStyle(name="Normal", fontSize=8, alignment=0),
        )

        self.elements.append(header_paragraph)
        self.elements.append(header_stamp)
        self.elements.append(Spacer(1, 10))

    def generate(self) -> bytes:
        self.doc.build(self.elements)
        return self.doc.canv.getpdfdata()


class TableReport(Report):
    data: List[Dict[str, any]]
    table_style: TableStyle = TableStyle(
        [
            ("FONT", (0, 0), (-1, 1), "Helvetica-Bold", 10, 12),
            ("FONT", (0, 1), (-1, -1), "Helvetica", 8, 8),
            ("VALIGN", (0, 0), (-1, -1), "MIDDLE"),
            ("INNERGRID", (0, 0), (-1, -1), 0.25, colors.black),
            ("BOX", (0, 0), (-1, -1), 0.25, colors.black),
        ]
    )

    def __init__(
        self,
        data: List[Dict[str, any]],
        table_style: TableStyle = None,
        *args,
        **kwargs,
    ):
        super().__init__(alignment=1, *args, **kwargs)
        self.data = data
        if table_style:
            self.table_style = table_style

        self._register_table_element()

    def _register_table_element(self):
        t = Table([self.data[0].keys(), *[list(x.values()) for x in self.data]])
        t.setStyle(self.table_style)
        self.elements.append(t)


class DetailReport(Report):
    instance: Dict[str, any]
    table_style: TableStyle = TableStyle(
        [
            ("FONT", (0, 0), (0, -1), "Helvetica-Bold", 10, 12),
            ("BACKGROUND", (0, 0), (0, -1), colors.lightgrey),
            ("VALIGN", (0, 0), (0, -1), "MIDDLE"),
            ("FONT", (1, 0), (-1, -1), "Helvetica", 8, 8),
            ("VALIGN", (0, 0), (-1, -1), "MIDDLE"),
            ("INNERGRID", (0, 0), (-1, -1), 0.25, colors.black),
            ("BOX", (0, 0), (-1, -1), 0.25, colors.black),
        ]
    )

    def __init__(
        self,
        instance: Dict[str, any],
        table_style: TableStyle = None,
        *args,
        **kwargs,
    ):
        super().__init__(alignment=0, *args, **kwargs)
        self.instance = instance
        if table_style:
            self.table_style = table_style

        self._register_table_element()

    def _register_table_element(self):
        l = []
        for key, value in self.instance.items():
            l.append([key, value])

        t = Table(l, hAlign="LEFT")
        t.setStyle(self.table_style)
        self.elements.append(t)
